<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
	version="2.0" xmlns="http://java.sun.com/xml/ns/persistence">
	<persistence-unit name="production" transaction-type="RESOURCE_LOCAL">

		<class>cz.mar.model.ExampleEntity</class>

		<!-- Do not check the main jar file for annotated classes. Only explicit 
			classes will be part of the persistence unit -->
		<exclude-unlisted-classes>true</exclude-unlisted-classes>

		<!-- By default, Bean Validation (and Hibernate Validator) is activated. 
			When an entity is created, updated (and optionally deleted), it is validated 
			before being sent to the database. The database schema generated by Hibernate 
			also reflects the constraints declared on the entity. You can fine-tune that 
			if needed: AUTO: if Bean Validation is present in the classpath, CALLBACK 
			and DDL are activated. CALLBACK: entities are validated on creation, update 
			and deletion. If no Bean Validation provider is present, an exception is 
			raised at initialization time. DDL: (not standard, see below) database schemas 
			are entities are validated on creation, update and deletion. If no Bean Validation 
			provider is present, an exception is raised at initialization time. NONE: 
			Bean Validation is not used at all -->
		<validation-mode>AUTO</validation-mode>
		<properties>
			<!-- 
				Hibernate.hbm2ddl.auto is a property which you can set in hibernate configuration. This will run DDL for the Database. The values for this property are 
				validate | update | create | create-drop 


				validate = will validate the schema that you have, and makes no changes to the database. 
				update = will update the database if the schema is already there in the database. 
				create = will create new database, removing existing schema if any 
				create-drop = will create new database and drops it when the sessionFactory is destroyed. 
			 -->
			<property name="hibernate.hbm2ddl.auto" value="update" />
			<property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect" />
			<property name="hibernate.connection.driver_class" value="org.postgresql.Driver" />
			<property name="javax.persistence.jdbc.url" value="jdbc:postgresql://localhost:5432/mtgi" />
			<property name="javax.persistence.jdbc.driver" value="org.postgresql.Driver" />
			<property name="javax.persistence.jdbc.user" value="admin" />
			<property name="javax.persistence.jdbc.password" value="admin123" />

			<property name="show_sql" value="true" />
		</properties>
	</persistence-unit>

</persistence>